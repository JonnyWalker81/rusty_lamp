/*
 * Copyright Â© 2002-2017 Bluebeam Software, Inc. All Rights Reserved.
 * Creator: Jonathan Rothberg
 */

use std::sync::Arc;
use std::io::{Write};
use generator::typer::Typer;
use generator::ident_style::{IdentStyleDefault, IdentConverter};

pub struct Spec {
    pub root: String,
    pub cpp_root: String,
    pub typer: Typer,
    pub java_out_folder: Option<String>,
    pub java_package: Option<String>,
    pub java_class_access_modifier: String,
    pub java_ident_style: IdentStyleDefault,
    pub java_cpp_exception: Option<String>,
    pub java_annotation: Option<String>,
    pub java_nullable_annotation: Option<String>,
    pub java_nonnullable_annotation: Option<String>,
    pub java_use_final_for_record: bool,
    pub cpp_out_folder: Option<String>,
    pub cpp_header_out_folder: Option<String>,
    pub cpp_include_prefix: String,
    pub cpp_extended_record_include_prefix: String,
    pub cpp_namespace: String,
    pub cpp_ident_style: IdentStyleDefault,
    pub cpp_file_ident_style: Arc<IdentConverter>,
    pub cpp_optional_template: String,
    pub cpp_optional_header: String,
    pub cpp_enum_has_workaround: bool,
    pub cpp_nn_header: Option<String>,
    pub cpp_nn_type: Option<String>,
    pub cpp_nn_check_expression: Option<String>,
    pub cpp_use_wide_strings: bool,
    pub jni_out_folder: Option<String>,
    pub jni_header_out_folder: Option<String>,
    pub jni_include_prefix: String,
    pub jni_include_cpp_prefix: String,
    pub jni_namespace: String,
    pub jni_class_ident_style: Arc<IdentConverter>,
    pub jni_file_ident_style: Arc<IdentConverter>,
    pub jni_base_lib_include_prefix: String,
    pub cpp_ext: String,
    pub cpp_header_ext: String,
    pub objc_out_folder: Option<String>,
    pub objc_cpp_out_folder: Option<String>,
    pub objc_ident_style: IdentStyleDefault,
    pub objc_file_ident_style: Arc<IdentConverter>,
    pub objc_cpp_ext: String,
    pub objc_header_ext: String,
    pub objc_include_prefix: String,
    pub objc_extended_record_include_prefix: String,
    pub objc_cpp_include_prefix: String,
    pub objc_cpp_include_cpp_prefix: String,
    pub objc_cpp_include_objc_prefix: String,
    pub objc_cpp_namespace: String,
    pub objc_base_lib_include_prefix: String,
    pub out_file_list_writer: Option<Arc<Write>>,
    pub skip_generation: bool,
    pub yaml_out_folder: Option<String>,
    pub yaml_out_file: Option<String>,
    pub yaml_prefix: String
}

impl Spec {
    pub fn new(root: String,
               cpp_root: String,
               typer: Typer,
               java_out_folder: Option<String>,
               java_package: Option<String>,
               java_class_access_modifier: String,
               java_ident_style: IdentStyleDefault,
               java_cpp_exception: Option<String>,
               java_annotation: Option<String>,
               java_nullable_annotation: Option<String>,
               java_nonnullable_annotation: Option<String>,
               java_use_final_for_record: bool,
               cpp_out_folder: Option<String>,
               cpp_header_out_folder: Option<String>,
               cpp_include_prefix: String,
               cpp_extended_record_include_prefix: String,
               cpp_namespace: String,
               cpp_ident_style: IdentStyleDefault,
               cpp_file_ident_style: Arc<IdentConverter>,
               cpp_optional_template: String,
               cpp_optional_header: String,
               cpp_enum_has_workaround: bool,
               cpp_nn_header: Option<String>,
               cpp_nn_type: Option<String>,
               cpp_nn_check_expression: Option<String>,
               cpp_use_wide_strings: bool,
               jni_out_folder: Option<String>,
               jni_header_out_folder: Option<String>,
               jni_include_prefix: String,
               jni_include_cpp_prefix: String,
               jni_namespace: String,
               jni_class_ident_style: Arc<IdentConverter>,
               jni_file_ident_style: Arc<IdentConverter>,
               jni_base_lib_include_prefix: String,
               cpp_ext: String,
               cpp_header_ext: String,
               objc_out_folder: Option<String>,
               objc_cpp_out_folder: Option<String>,
               objc_ident_style: IdentStyleDefault,
               objc_file_ident_style: Arc<IdentConverter>,
               objc_cpp_ext: String,
               objc_header_ext: String,
               objc_include_prefix: String,
               objc_extended_record_include_prefix: String,
               objc_cpp_include_prefix: String,
               objc_cpp_include_cpp_prefix: String,
               objc_cpp_include_objc_prefix: String,
               objc_cpp_namespace: String,
               objc_base_lib_include_prefix: String,
               out_file_list_writer: Option<Arc<Write>>,
               skip_generation: bool,
               yaml_out_folder: Option<String>,
               yaml_out_file: Option<String>,
               yaml_prefix: String
            ) -> Spec {
        Spec{
            root: root,
            cpp_root: cpp_root,
            typer: typer,
            java_out_folder: java_out_folder,
            java_package: java_package,
            java_class_access_modifier: java_class_access_modifier,
            java_ident_style: java_ident_style,
            java_cpp_exception: java_cpp_exception,
            java_annotation: java_annotation,
            java_nullable_annotation: java_nullable_annotation,
            java_nonnullable_annotation: java_nonnullable_annotation,
            java_use_final_for_record: java_use_final_for_record,
            cpp_out_folder: cpp_out_folder,
            cpp_header_out_folder: cpp_header_out_folder,
            cpp_include_prefix: cpp_include_prefix,
            cpp_extended_record_include_prefix: cpp_extended_record_include_prefix,
            cpp_namespace: cpp_namespace,
            cpp_ident_style: cpp_ident_style,
            cpp_file_ident_style: cpp_file_ident_style,
            cpp_optional_template: cpp_optional_template,
            cpp_optional_header: cpp_optional_header,
            cpp_enum_has_workaround: cpp_enum_has_workaround,
            cpp_nn_header: cpp_nn_header,
            cpp_nn_type: cpp_nn_type,
            cpp_nn_check_expression: cpp_nn_check_expression,
            cpp_use_wide_strings: cpp_use_wide_strings,
            jni_out_folder: jni_out_folder,
            jni_header_out_folder: jni_header_out_folder,
            jni_include_prefix: jni_include_prefix,
            jni_include_cpp_prefix: jni_include_cpp_prefix,
            jni_namespace: jni_namespace,
            jni_class_ident_style: jni_class_ident_style,
            jni_file_ident_style: jni_file_ident_style,
            jni_base_lib_include_prefix: jni_base_lib_include_prefix,
            cpp_ext: cpp_ext,
            cpp_header_ext: cpp_header_ext,
            objc_out_folder: objc_out_folder,
            objc_cpp_out_folder: objc_cpp_out_folder,
            objc_ident_style: objc_ident_style,
            objc_file_ident_style: objc_file_ident_style,
            objc_cpp_ext: objc_cpp_ext,
            objc_header_ext: objc_header_ext,
            objc_include_prefix: objc_include_prefix,
            objc_extended_record_include_prefix: objc_extended_record_include_prefix,
            objc_cpp_include_prefix: objc_cpp_include_prefix,
            objc_cpp_include_cpp_prefix: objc_cpp_include_cpp_prefix,
            objc_cpp_include_objc_prefix: objc_cpp_include_objc_prefix,
            objc_cpp_namespace: objc_cpp_namespace,
            objc_base_lib_include_prefix: objc_base_lib_include_prefix,
            out_file_list_writer: out_file_list_writer,
            skip_generation: skip_generation,
            yaml_out_folder: yaml_out_folder,
            yaml_out_file: yaml_out_file,
            yaml_prefix: yaml_prefix
        }
    }

    // fn pass_through(input: String) -> String {
    //     input
    // }
}
